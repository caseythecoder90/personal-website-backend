{
  "apiBaseUrl": "http://localhost:8080/api/v1",
  "description": "Test JSON requests for Personal Website API endpoints",
  "version": "1.0.0",
  
  "requests": {
    
    "technologies": {
      "create_java": {
        "method": "POST",
        "endpoint": "/technologies",
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "name": "Java",
          "version": "21",
          "category": "LANGUAGE",
          "iconUrl": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/java/java-original.svg",
          "color": "#f89820",
          "documentationUrl": "https://docs.oracle.com/en/java/",
          "proficiencyLevel": "EXPERT",
          "yearsExperience": 5.0,
          "featured": true
        }
      },
      
      "create_spring_boot": {
        "method": "POST",
        "endpoint": "/technologies",
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "name": "Spring Boot",
          "version": "3.2",
          "category": "FRAMEWORK",
          "iconUrl": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/spring/spring-original.svg",
          "color": "#6db33f",
          "documentationUrl": "https://docs.spring.io/spring-boot/",
          "proficiencyLevel": "EXPERT",
          "yearsExperience": 4.0,
          "featured": true
        }
      },
      
      "create_react": {
        "method": "POST",
        "endpoint": "/technologies",
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "name": "React",
          "version": "18",
          "category": "FRAMEWORK",
          "iconUrl": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg",
          "color": "#61dafb",
          "documentationUrl": "https://react.dev/",
          "proficiencyLevel": "PROFICIENT",
          "yearsExperience": 3.0,
          "featured": true
        }
      },
      
      "create_postgresql": {
        "method": "POST",
        "endpoint": "/technologies",
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "name": "PostgreSQL",
          "version": "15",
          "category": "DATABASE",
          "iconUrl": "https://cdn.jsdelivr.net/gh/devicons/devicon/icons/postgresql/postgresql-original.svg",
          "color": "#336791",
          "documentationUrl": "https://www.postgresql.org/docs/",
          "proficiencyLevel": "PROFICIENT",
          "yearsExperience": 3.0,
          "featured": true
        }
      }
    },
    
    "projects": {
      "create_portfolio_website": {
        "method": "POST",
        "endpoint": "/projects",
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "name": "Personal Website Portfolio",
          "shortDescription": "Full-stack personal website showcasing projects and technical skills",
          "fullDescription": "A comprehensive personal portfolio website built with enterprise-grade patterns and modern technologies. Features include project management, blog system, analytics tracking, and SEO optimization. Built with Spring Boot backend, React frontend, and PostgreSQL database.",
          "githubUrl": "https://github.com/caseyquinn/personal-website",
          "liveUrl": "https://caseyquinn.com",
          "dockerUrl": "https://hub.docker.com/r/caseyquinn/personal-website",
          "documentationUrl": "https://docs.caseyquinn.com",
          "projectType": "PERSONAL",
          "status": "IN_PROGRESS",
          "difficultyLevel": "ADVANCED",
          "startDate": "2024-01-01T00:00:00",
          "estimatedHours": 120,
          "displayOrder": 1,
          "featured": true,
          "published": true
        }
      },
      
      "create_ecommerce_platform": {
        "method": "POST",
        "endpoint": "/projects",
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "name": "E-Commerce Platform",
          "shortDescription": "Scalable microservices-based e-commerce solution",
          "fullDescription": "Built a full-featured e-commerce platform using Spring Boot microservices architecture. Features include user authentication, product catalog with search and filtering, shopping cart functionality, secure payment processing with Stripe integration, order management, and admin dashboard. Deployed using Docker containers on AWS with Redis caching and PostgreSQL database.",
          "githubUrl": "https://github.com/caseyquinn/ecommerce-platform",
          "liveUrl": "https://demo-shop.caseyquinn.com",
          "dockerUrl": "https://hub.docker.com/r/caseyquinn/ecommerce-platform",
          "projectType": "PROFESSIONAL",
          "status": "COMPLETED",
          "difficultyLevel": "EXPERT",
          "startDate": "2023-06-01T00:00:00",
          "completionDate": "2023-12-15T00:00:00",
          "estimatedHours": 280,
          "displayOrder": 2,
          "featured": true,
          "published": true
        }
      },
      
      "create_task_management_api": {
        "method": "POST",
        "endpoint": "/projects",
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "name": "Task Management API",
          "shortDescription": "RESTful API for project and task management",
          "fullDescription": "A comprehensive task management system with user authentication using JWT, project organization with role-based access control, real-time notifications via WebSockets, advanced filtering and sorting capabilities, and comprehensive audit logging. Built with Spring Boot, Spring Security, and PostgreSQL with full API documentation using OpenAPI/Swagger.",
          "githubUrl": "https://github.com/caseyquinn/task-api",
          "projectType": "LEARNING",
          "status": "COMPLETED",
          "difficultyLevel": "INTERMEDIATE",
          "startDate": "2023-03-01T00:00:00",
          "completionDate": "2023-05-20T00:00:00",
          "estimatedHours": 85,
          "displayOrder": 3,
          "featured": false,
          "published": true
        }
      },
      
      "create_weather_dashboard": {
        "method": "POST",
        "endpoint": "/projects",
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "name": "Weather Dashboard",
          "shortDescription": "Real-time weather monitoring with data visualization",
          "fullDescription": "Interactive weather dashboard built with React and TypeScript. Features include location-based forecasts using geolocation API, historical data charts with Chart.js, severe weather alerts and notifications, responsive design for mobile and desktop, and integration with OpenWeatherMap API. Includes data caching and offline functionality.",
          "githubUrl": "https://github.com/caseyquinn/weather-dashboard",
          "liveUrl": "https://weather.caseyquinn.com",
          "projectType": "PERSONAL",
          "status": "MAINTAINED",
          "difficultyLevel": "INTERMEDIATE",
          "startDate": "2023-01-15T00:00:00",
          "completionDate": "2023-02-28T00:00:00",
          "estimatedHours": 45,
          "displayOrder": 4,
          "featured": false,
          "published": true
        }
      }
    },
    
    "contact_submissions": {
      "create_collaboration_inquiry": {
        "method": "POST",
        "endpoint": "/contact",
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "name": "John Smith",
          "email": "john.smith@example.com",
          "subject": "Collaboration Opportunity",
          "message": "Hi Casey, I would like to discuss a potential collaboration on a Spring Boot project. I saw your portfolio and was impressed by your enterprise architecture patterns. Would you be interested in working together on a fintech application?",
          "inquiryType": "COLLABORATION"
        }
      },
      
      "create_job_inquiry": {
        "method": "POST",
        "endpoint": "/contact",
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "name": "Sarah Johnson",
          "email": "sarah.j@techcorp.com",
          "subject": "Senior Java Developer Position",
          "message": "Hello Casey, we have an exciting senior backend developer position at TechCorp that might interest you. The role involves building scalable microservices with Spring Boot and leading a small team. Your experience with enterprise patterns would be a great fit. Are you open to discussing this opportunity?",
          "inquiryType": "HIRING"
        }
      },
      
      "create_freelance_inquiry": {
        "method": "POST",
        "endpoint": "/contact",
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "name": "Mike Brown",
          "email": "mike@startup.io",
          "subject": "Freelance Development Project",
          "message": "Looking for a Java developer for a 3-month project to build a REST API for our startup. We need someone with strong Spring Boot skills and experience with PostgreSQL. The project involves user authentication, payment processing, and real-time notifications. Are you available for freelance work?",
          "inquiryType": "FREELANCE"
        }
      },
      
      "create_general_inquiry": {
        "method": "POST",
        "endpoint": "/contact",
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "name": "Alice Cooper",
          "email": "alice.cooper@email.com",
          "subject": "Technical Question",
          "message": "Hi Casey, I'm a fellow developer and I really enjoyed reading about your DAO pattern implementation. I have a question about exception handling in the service layer - do you handle both business and data exceptions the same way? Would love to hear your thoughts!",
          "inquiryType": "GENERAL"
        }
      }
    },
    
    "blog_categories": {
      "create_software_development": {
        "method": "POST",
        "endpoint": "/blog/categories",
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "name": "Software Development",
          "description": "Articles about programming, architecture patterns, and development best practices",
          "color": "#2563eb"
        }
      },
      
      "create_career_growth": {
        "method": "POST",
        "endpoint": "/blog/categories",
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "name": "Career & Growth",
          "description": "Professional development insights, career advice, and learning strategies",
          "color": "#10b981"
        }
      },
      
      "create_tutorials": {
        "method": "POST",
        "endpoint": "/blog/categories",
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "name": "Tutorials",
          "description": "Step-by-step guides, how-to articles, and practical coding examples",
          "color": "#8b5cf6"
        }
      }
    },
    
    "blog_tags": {
      "create_java_tag": {
        "method": "POST",
        "endpoint": "/blog/tags",
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "name": "Java"
        }
      },
      
      "create_spring_boot_tag": {
        "method": "POST",
        "endpoint": "/blog/tags",
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "name": "Spring Boot"
        }
      },
      
      "create_architecture_tag": {
        "method": "POST",
        "endpoint": "/blog/tags",
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "name": "Architecture"
        }
      },
      
      "create_best_practices_tag": {
        "method": "POST",
        "endpoint": "/blog/tags",
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "name": "Best Practices"
        }
      }
    },
    
    "blog_posts": {
      "create_dao_pattern_post": {
        "method": "POST",
        "endpoint": "/blog/posts",
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "title": "Implementing the DAO Pattern in Spring Boot: Enterprise Best Practices",
          "content": "# Implementing the DAO Pattern in Spring Boot\n\nThe Data Access Object (DAO) pattern is a structural pattern that allows us to isolate the application/business layer from the persistence layer. In this comprehensive guide, we'll explore how to implement the DAO pattern in Spring Boot applications following enterprise best practices.\n\n## Why Use DAO Pattern?\n\n1. **Separation of Concerns**: Business logic remains separate from data access logic\n2. **Technology Independence**: Easy to switch between different persistence technologies\n3. **Exception Translation**: Database-specific exceptions are handled at the DAO level\n4. **Testability**: Service layer can be tested with mocked DAOs\n\n## Implementation Example\n\n```java\n@Repository\npublic class ProjectDaoImpl implements ProjectDao {\n    \n    private final ProjectRepository repository;\n    \n    public ProjectDaoImpl(ProjectRepository repository) {\n        this.repository = repository;\n    }\n    \n    @Override\n    public Project save(Project project) {\n        try {\n            return repository.save(project);\n        } catch (DataIntegrityViolationException e) {\n            throw new DataIntegrityException(\n                \"Failed to save project: \" + e.getMessage(), e\n            );\n        }\n    }\n}\n```\n\n## Best Practices\n\n- Always translate database exceptions to application-specific exceptions\n- Keep the DAO interface technology-agnostic\n- Use proper transaction boundaries in the service layer\n- Implement comprehensive error handling\n\nBy following these patterns, you'll build maintainable and scalable applications that are ready for enterprise environments.",
          "excerpt": "Learn how to implement the DAO pattern in Spring Boot applications with proper exception handling and enterprise-grade best practices.",
          "readTimeMinutes": 8,
          "published": true,
          "publishedAt": "2024-01-15T10:00:00",
          "categoryIds": [1],
          "tagIds": [1, 2, 3, 4]
        }
      }
    }
  },
  
  "curlCommands": {
    "description": "Ready-to-use cURL commands for testing the API",
    
    "create_technology": "curl -X POST http://localhost:8080/api/v1/technologies \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"Java\",\n    \"version\": \"21\",\n    \"category\": \"LANGUAGE\",\n    \"proficiencyLevel\": \"EXPERT\",\n    \"yearsExperience\": 5.0,\n    \"featured\": true,\n    \"color\": \"#f89820\"\n  }'",
    
    "create_project": "curl -X POST http://localhost:8080/api/v1/projects \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"Personal Website Portfolio\",\n    \"shortDescription\": \"Full-stack personal website showcasing projects and technical skills\",\n    \"projectType\": \"PERSONAL\",\n    \"status\": \"IN_PROGRESS\",\n    \"difficultyLevel\": \"ADVANCED\",\n    \"featured\": true,\n    \"published\": true\n  }'",
    
    "create_contact": "curl -X POST http://localhost:8080/api/v1/contact \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"John Smith\",\n    \"email\": \"john.smith@example.com\",\n    \"subject\": \"Collaboration Opportunity\",\n    \"message\": \"Hi Casey, I would like to discuss a potential collaboration.\",\n    \"inquiryType\": \"COLLABORATION\"\n  }'",
    
    "get_all_projects": "curl -X GET http://localhost:8080/api/v1/projects",
    
    "get_all_technologies": "curl -X GET http://localhost:8080/api/v1/technologies",
    
    "health_check": "curl -X GET http://localhost:8080/api/v1/health"
  },
  
  "testSequence": {
    "description": "Recommended order for testing the API",
    "steps": [
      "1. Run health check to ensure API is running",
      "2. Create technologies first (they're referenced by projects)",
      "3. Create projects using the technology IDs",
      "4. Create blog categories and tags",
      "5. Create blog posts referencing categories and tags",
      "6. Test contact form submissions",
      "7. Verify all GET endpoints return the created data"
    ]
  }
}